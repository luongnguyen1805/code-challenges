PROBLEM
  https://www.hackerrank.com/challenges/insertion-sort/problem?isFullScreen=true
  level: Hard

SOLUTION
============================================================

class Node 
{
    public:
        int* value;
        Node* left;
        Node* right;
        int weight;
};

void addToNode(Node* root, Node* aNumber) {
    
    if ((*aNumber->value) >= (*root->value)) {

        if ((*aNumber->value) > (*root->value))
            root->weight += 1;    
                
        if (root->right == NULL) {                      
            root->right = aNumber;                  
        }
        else {
            Node* currentRight = root->right;
            addToNode(currentRight,aNumber);
        }
    }
    else {

        aNumber->weight = root->weight+1;        
        if (root->left == NULL) {
            root->left = aNumber;      
        }
        else {
            Node* currentLeft = root->left;
            addToNode(currentLeft,aNumber);
        }
    }
        
}

/*
 * Complete the 'insertionSort' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts INTEGER_ARRAY arr as parameter.
 */
 
Node* createNewNode(int* val) {
    Node* node = new Node();
    node->left = NULL;
    node->right = NULL;
    node->weight = 0;
    node->value = val;
    return node;
}

int insertionSort(vector<int> arr) {
   
    int n = arr.size();
    int totalShift = 0;
    
    Node* root = createNewNode(&arr[0]);
    
    for (int i = 1; i < n; i++) {
        
        Node* cur = createNewNode(&arr[i]);
        
        addToNode(root, cur);
        
        totalShift += cur->weight;
    }
    
    return totalShift;   
}

============================================================

